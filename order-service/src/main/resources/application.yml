server:
  port: 8081

# Registering order-service in Eureka Server as Client
eureka:
  client:
    service-url:
      defaultZone: http://eureka:password@localhost:8761/eureka

# Database connection configurations
spring:
  application:
    name: order-service
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/microservices-project
    username: postgres
    password: root123
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    properties:
      hibernate:
        default_schema: order_service
        temp:
          use_jdbc_metadata_defaults: false
        jdbc:
          lob:
            non_contextual_creation: true
    hibernate:
      ddl-auto: update
      naming:
        implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyComponentPathImpl

# Kafka Producer configurations
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      properties:
#        spring.json.type.mapping: event:com.example.orderservice.events.OrderPlacedEvent

# Actuator configurations
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

# Zipkin configurations
  tracing:
    sampling:
      probability: 1.0

# Resilience4j circuit breaker configurations for inventory-service
resilience4j:
  circuitbreaker:
    instances:
      inventory:
        register-health-indicator: true
        event-consumer-buffer-size: 10
        # resilience4j makes requests up to 5 times based on COUNT_BASED algorithm till inventory-service responds
        sliding-window-type: COUNT_BASED
        # if inventory-service is down, after 5 requests status will be changed from closed to open
        sliding-window-size: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 5s
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
  timelimiter:
    instances:
      inventory:
        # if inventory-service is up, but responding very slowly, resilience4j waits for response for up to 3 sec
        timeout-duration: 5s
#  retry:
#    instances:
#      inventory:
#        # resilience4j resends requests 3 times every 2 seconds
#        max-attempts: 3
#        wait-duration: 2s